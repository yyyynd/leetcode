package leetCode2021_11;

/**
 * 能够执行三种操作，/2,+1,-1，那么为了能最快抵达1肯定是多用/2
 * 但这里遇到奇数的情况就需要讨论是+1还是-1了
 *
 * 因为/2其实就是右移一位，且需要0位上不为1，那么在奇数的情况下我们肯定希望
 * 执行加减操作后，能尽量执行更多的除操作，那么肯定希望从0开始的连续低位上的0越多越好
 * 而+1就可以连续消除1，当然这起码得消两个以上才算赚，不然和-1只去除末尾没什么不同
 *
 * 或者就是正常用DFS + 剪枝来进行计算
 */
public class k397 {
    public int integerReplacement(int n) {
        int count = 0;
        while (n != 1){
            if((n & 1) == 1){
                count += 2;
                if((n >> 1 & 1) == 0 || n == 3)
                    n >>= 1;
                else
                    n = (n >> 1) + 1;
            }else {
                count += 1;
                n >>= 1;
            }
        }

        return count;
    }
}
